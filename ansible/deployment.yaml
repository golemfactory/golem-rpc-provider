- name: Deployment
  hosts: all
  vars:
    image_file_path: &image_file_path ./provider-bor.docker.tar.bz2
    dest_image_file: *image_file_path
    providers_port_base: 15000
    providers_port_step: 10
    providers:
      # Mumbai
      - {subnet: 'mumbai_proxy_subnet', network: 'rinkeby', server_name: 'providers.golem.network', target_proxy: 'http://reality64.golem.network:9998',  node_name: 'Mahomet Aneirin'}
      - {subnet: 'mumbai_proxy_subnet', network: 'rinkeby', server_name: 'providers.golem.network', target_proxy: 'http://reality64.golem.network:9998',  node_name: 'Sukhrab Shib'}
      - {subnet: 'mumbai_proxy_subnet', network: 'rinkeby', server_name: 'providers.golem.network', target_proxy: 'http://reality64.golem.network:9998',  node_name: 'Samira Ulric'}
      - {subnet: 'mumbai_proxy_subnet', network: 'rinkeby', server_name: 'providers.golem.network', target_proxy: 'http://reality64.golem.network:9998',  node_name: 'Tomos Blanchard'}
      # Polygon
      - {subnet: 'poly_subnet',         network: 'rinkeby', server_name: 'providers.golem.network', target_proxy: 'http://archive.golem.network/polygon', node_name: 'Aishah Hansen'}
      - {subnet: 'poly_subnet',         network: 'rinkeby', server_name: 'providers.golem.network', target_proxy: 'http://archive.golem.network/polygon', node_name: 'Isobella Mcclain'}
      - {subnet: 'poly_subnet',         network: 'rinkeby', server_name: 'providers.golem.network', target_proxy: 'http://archive.golem.network/polygon', node_name: 'Abbey Blake'}
      - {subnet: 'poly_subnet',         network: 'rinkeby', server_name: 'providers.golem.network', target_proxy: 'http://archive.golem.network/polygon', node_name: 'Otto Buchanan'}
  tasks:
    - name: Install apt dependencies
      apt: 
        update_cache: yes
        name: [docker.io, docker-compose]
      become: true

    - name: Add user '{{ ansible_user }}' to docker group
      user:
        name: '{{ ansible_user }}'
        groups: docker
        append: yes
      become: true

    - name: Copy local docker image file
      copy: 
        src: '{{ image_file_path }}'
        dest: '{{ dest_image_file }}'
        force: true
      notify:
        - Import image to docker

    # Import image to docker if image file changed
    - name: flush handlers
      meta: flush_handlers

    - name: Generate docker-compose.yml
      template:
        src: docker-compose.yml.j2
        dest: ./docker-compose.yml

    - name: Start composed containers
      command: 'docker-compose -p borprov up -d'

  handlers:
    - name: Import image to docker
      command: 'docker load -i {{ dest_image_file }}'

